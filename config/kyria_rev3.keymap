#include <behaviors.dtsi>

/* #include <dt-bindings/zmk/mouse.h> */

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
/* #define MO_TOG(layer) &mo_tog layer layer */

/ {
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings =
                <&mo>,
                <&tog>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /* default_layer { */
        /* 	bindings = < */
        /* 		&mo_tog 2 1     // &mo 2 on hold, &tog 1 on tap */
        /* 		MO_TOG(3)       // &mo 3 on hold, &tog 3 on tap */
        /* 	>; */
        /* }; */

        main {
            bindings = <
       &kp TAB  &kp Q  &kp W     &kp E     &kp R     &kp T                                                       &kp Y     &kp U        &kp I    &kp O     &kp P  &kp EQUAL
&mt LSHIFT ESC  &kp A  &kp S     &kp D     &kp F     &kp G                                                       &kp H     &kp J        &kp K    &kp L  &kp SEMI    &kp SQT
     &kp LCTRL  &kp Z  &kp X     &kp C     &kp V     &kp B      &mo 4      &kp LSHIFT  &kp LSHIFT  &kp LSHIFT    &kp N     &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp RCTRL
                              &kp LGUI  &kp LGUI  &kp LALT  &kp SPACE  &kp LEFT_SHIFT    &kp BSPC     &kp RET  &kp TAB  &kp BSPC  &mo_tog 3 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &kp KP_MULTIPLY  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                     &kp KP_EQUAL  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans  &kp KP_N1  &kp KP_N3  &kp KP_N3  &kp KP_SLASH  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans     &trans     &trans
            >;
        };

        colemak {
            bindings = <
       &kp TAB  &kp Q  &kp W   &kp F   &kp P   &kp B                                   &kp J   &kp L      &kp U    &kp Y   &kp SQT   &kp BSLH
&mt LSHIFT ESC  &kp A  &kp R   &kp S   &kp T   &kp G                                   &kp M   &kp N      &kp E    &kp I     &kp O   &kp SEMI
     &kp LCTRL  &kp Z  &kp X   &kp C   &kp D   &kp V  &trans  &trans  &trans  &trans   &kp K   &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp RCTRL
                              &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans
            >;
        };

        menu {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &rgb_ug RGB_TOG           &trans           &trans           &trans           &trans  &trans
&trans  &trans  &trans  &trans   &to 0   &to 2                                  &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans           &trans           &trans           &trans
            >;
        };

        SYMBOLS {
            label = "symbols";
            bindings = <
&kp GRAVE           &kp N1  &kp N2     &kp N3     &kp N4     &kp N5                                     &kp N6    &kp N7    &kp N8    &kp N9    &kp N0  &kp BSLH
&kp TILDE  &kp EXCLAMATION  &kp AT  &kp POUND   &kp DLLR  &kp PRCNT                                  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR    &trans
   &trans           &trans  &trans   &kp PLUS  &kp EQUAL  &kp MINUS  &trans  &trans  &trans  &trans  &kp UNDER  &kp LBKT  &kp RBKT  &kp LBRC  &kp RBRC    &trans
                                       &trans     &trans     &trans  &trans  &trans  &trans  &trans     &trans    &trans    &trans
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans     &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans
            >;

            /* bindings = < */
            /*     &trans  &trans  &trans  &mmv MOVE_UP  &trans  &trans                                  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END  &trans  &trans */
            /*     &trans  &trans  &mmv MOVE_LEFT &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans                                  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &trans  &trans */
            /*     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans     &trans  &trans  &trans */
            /*     &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans */
            /* >; */
        };

        functions {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans  &kp F7  &kp F8  &kp F9  &kp F10  &kp F13
&trans  &trans  &trans  &trans  &trans  &trans                                  &trans  &kp F4  &kp F5  &kp F6  &kp F11  &kp F14
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12  &kp F15
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
